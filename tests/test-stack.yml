AWSTemplateFormatVersion: '2010-09-09'
Description: Cognito Ergo Sum Test Stack
Transform: AWS::Serverless-2016-10-31
Resources:
  UserPool:
    Type: "AWS::Cognito::UserPool"
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      AutoVerifiedAttributes:
        - email
      AliasAttributes:
        - email
        - preferred_username
      MfaConfiguration: "OFF"
      Schema:
        - Name: name
          AttributeDataType: String
          StringAttributeConstraints:
            MinLength: "1"
            MaxLength: "2048"
          Mutable: true
          Required: true
        - Name: preferred_username
          AttributeDataType: String
          StringAttributeConstraints:
            MinLength: "1"
            MaxLength: "40"
          Mutable: true
          Required: false
        - Name: email
          AttributeDataType: String
          Mutable: true
          Required: true
        - Name: email_verified
          AttributeDataType: Boolean
          DeveloperOnlyAttribute: false
          Required: false
          Mutable: true
        - Name: sub
          AttributeDataType: String
          StringAttributeConstraints:
            MinLength: "1"
            MaxLength: "2048"
          Mutable: false
          Required: true
      DeviceConfiguration:
        ChallengeRequiredOnNewDevice: true
        DeviceOnlyRememberedOnUserPrompt: false
      UsernameConfiguration:
        CaseSensitive: False
      UserPoolTier: LITE
      LambdaConfig:
        CreateAuthChallenge: !GetAtt CreateAuthChallengeLambda.Arn
        VerifyAuthChallengeResponse: !GetAtt VerifyAuthChallengeLambda.Arn
        DefineAuthChallenge: !GetAtt DefineAuthChallengeLambda.Arn

  WebAppClient:
    Type: "AWS::Cognito::UserPoolClient"
    Properties:
      GenerateSecret: false
      UserPoolId: !Ref UserPool
      PreventUserExistenceErrors: 'ENABLED'
      RefreshTokenValidity: 30
      ReadAttributes:
        - name
        - email
      WriteAttributes:
        - name
        - email
      SupportedIdentityProviders:
        - COGNITO
      AllowedOAuthFlows:
        - implicit
        - code
      AllowedOAuthFlowsUserPoolClient: True
      AllowedOAuthScopes:
        - profile
        - openid
        - aws.cognito.signin.user.admin
      ExplicitAuthFlows:
        - ALLOW_ADMIN_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_SRP_AUTH
        - ALLOW_CUSTOM_AUTH
      CallbackURLs:
        - !Sub "http://localhost/auth/login/"
        - !Sub "http://localhost/auth/openid/"
      LogoutURLs:
        - !Sub "http://localhost/auth/logout/"

  CreateAuthChallengeLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      Runtime: nodejs20.x
      InlineCode: |
        exports.handler = async (event) => {
          console.log('Create auth challenge triggered', event);
          
          // Simple challenge - just return a static code
          event.response.publicChallengeParameters = {
            challenge: 'What is the answer?'
          };
          
          event.response.privateChallengeParameters = {
            answer: '42'
          };
          
          event.response.challengeMetadata = 'CUSTOM_CHALLENGE';
          
          return event;
        };

  VerifyAuthChallengeLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      Runtime: nodejs20.x
      InlineCode: |
        exports.handler = async (event) => {
          console.log('Verify auth challenge triggered', event);
          
          // Compare the answer provided by the user with our stored answer
          const expectedAnswer = event.request.privateChallengeParameters.answer;
          const challengeAnswer = event.request.challengeAnswer;
          
          event.response.answerCorrect = (challengeAnswer === expectedAnswer);
          
          return event;
        };

  DefineAuthChallengeLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      Runtime: nodejs20.x
      InlineCode: |
        exports.handler = async (event) => {
          console.log('Define auth challenge triggered', event);
          
          if (!event.request.session || event.request.session.length === 0) {
            // First challenge
            event.response.challengeName = 'CUSTOM_CHALLENGE';
            event.response.issueTokens = false;
            event.response.failAuthentication = false;
          } else {
            // Check if user answered correctly
            const lastAttempt = event.request.session.slice(-1)[0];
            if (lastAttempt.challengeResult === true) {
              event.response.issueTokens = true;
              event.response.failAuthentication = false;
            } else {
              event.response.issueTokens = false;
              event.response.failAuthentication = true;
            }
          }
          
          return event;
        };

  # Add Lambda permissions for Cognito to invoke these functions
  CreateAuthChallengePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref CreateAuthChallengeLambda
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt UserPool.Arn

  VerifyAuthChallengePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref VerifyAuthChallengeLambda
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt UserPool.Arn

  DefineAuthChallengePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref DefineAuthChallengeLambda
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt UserPool.Arn

Outputs:
  UserPoolId:
    Description: User pool ID
    Value: !Ref UserPool
  WebAppClientId:
    Description: User pool client ID for the web app
    Value: !Ref WebAppClient
